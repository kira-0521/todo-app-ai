// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Status {
  id           Int    @id @default(autoincrement())
  title        String @db.VarChar(255)
  displayOrder Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  task Task[]

  @@index([createdById], name: "createdByIdIdx")
  @@index([title])
}

model Task {
  id        Int     @id @default(autoincrement())
  title     String  @db.VarChar(255)
  thumbnail String? // @db.Text
  content   String? // @db.Text

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  status   Status @relation(fields: [statusId], references: [id])
  statusId Int

  @@index([createdById], name: "idx_createdById")
  @@index([statusId])
  @@index([title])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  statuses      Status[]

  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
